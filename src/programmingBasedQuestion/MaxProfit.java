package programmingBasedQuestion;

import java.util.HashMap;
import java.util.Map;

public class MaxProfit {
	static int maxProfit(int n, int[] arr) {

		Map<Integer, Integer> map = new HashMap<>();

		int size = arr.length;

		int max = -1;

		while (--size >= 0) {

			int current = arr[size];
			int num = 0;
			for (int i : map.keySet()) {
				if (i % current == 0) {
					num = Math.max(num, map.get(i));
				}
			}
			map.put(current, num + current);

			if (max < num + current) {

				max = num + current;

			}

		}

		return max;

	}

	static int maxProfit(int[] arr) {
		int min = arr[0], max = 0,maxF=0,minF=0;
		for (int i = 0; i < arr.length; i++) {
			if (arr[i] > max && minF>i) {
				max = arr[i];
				maxF=i;
			} else if (arr[i] < min && maxF<i) {
				min = arr[i];
				minF=i;
			}

		}
		System.out.println(min + "-" + max);
		return max - min;

	}

	public static void rotate(int rotet, int[] arr) {
		int arrSize = arr.length;
		for (int i = 0; i < rotet; i++) {
			int max = arr[arrSize - 1];
			System.out.println("");
			System.out.println(i+"-"+max);
			for (int j = arrSize-1; j >0; j--) {
				arr[j] = arr[j - 1];
			}
			arr[0] = max;
			for (int val : arr) {
				System.out.print(val);
			}

		}
	}
	
	public static int calculateMaxProfit(int[] arr) {
        int lowestPriceTillThatDay = arr[0];
        int maxProfit = Integer.MIN_VALUE;
        for (int i = 0; i < arr.length; i++) {
            int profit = 0;
            if (arr[i] > lowestPriceTillThatDay) {
                profit = arr[i] - lowestPriceTillThatDay;
                if (profit > maxProfit) {
                    maxProfit = profit;
                }
            } else {
                lowestPriceTillThatDay = arr[i];
            }
        }
        return maxProfit;
    }

	public static void main(String[] args) {
		int[] arr1 = new int[] { 42, 8468, 6335, 6501, 9170, 5725, 1479, 9359, 6963, 4465, 5706, 8146, 3282, 6828, 9962,
				492, 2996, 1943, 4828, 5437, 2392, 4605, 3903, 154, 293, 2383, 7422, 8717, 9719, 9896, 5448, 1727, 4772,
				1539, 1870, 9913, 5668, 6300, 7036, 9895, 8704, 3812, 1323, 334, 7674, 4665, 5142, 7712, 8254, 6869,
				5548, 7645, 2663, 2758, 38, 2860, 8724, 9742, 7530, 779, 2317, 3036, 2191, 1843, 289, 107, 9041, 8943,
				9265, 2649, 7447, 3806, 5891, 6730, 4371, 5351, 5007, 1102, 4394, 3549, 9630, 2624, 4085, 9955, 8757,
				1841, 4967, 7377, 3932, 6309, 6945, 2440, 4627, 1324, 5538, 1539, 6119, 2083, 2930, 6542, 4834, 1116,
				4640, 9659, 2705, 9931, 3978, 2307, 1674, 2387, 5022, 8746, 6925, 9073, 6271, 5830, 6778, 5574, 5098,
				6513, 3987, 3291, 9162, 8637, 2356, 4768, 3656, 5575, 4032, 2053, 7351, 1151, 6942, 1725, 3967, 3431,
				1108, 192, 8008, 1338, 5458, 2288, 7754, 384, 4946, 8910, 2210, 9759, 4222, 8589, 6423, 4947, 7507,
				3031, 6414, 9169, 901, 2592, 8763, 1656, 7411, 6360, 7625, 538, 1549, 6484, 7596, 4042, 3603, 4351, 292,
				837, 9375, 1021, 4597, 4022, 7349, 3200, 9669, 4485, 8282, 4735, 54, 2000, 6419, 7939, 6901, 3789, 8128,
				468, 3729, 4894, 4649, 2484, 7808, 2422, 4311, 6618, 2814, 9515, 4310, 7617, 8936, 7452, 601, 5250,
				6520, 1557, 2799, 304, 6225, 1009, 5845, 2610, 4990, 2703, 3196, 486, 3094, 4344, 524, 1588, 9315, 9504,
				7449, 5201, 3459, 6619, 581, 9797, 4799, 5282, 9590, 799, 8010, 7158, 473, 3623, 8539, 2293, 6039, 4180,
				8191, 9658, 7959, 6192, 9816, 2889, 9157, 1512, 6203, 2635, 4273, 56, 329, 2647, 6363, 4887, 8876, 8434,
				9870, 143, 3845, 1417, 1882, 1999, 323, 8652, 22, 5700, 3558, 8477, 7893, 4390, 5076, 713, 2601, 2511,
				1004, 6870, 7862, 4689, 3402, 9790, 5256, 6424, 5003, 586, 4183, 286, 7089, 1427, 8618, 3758, 9833, 933,
				4170, 2155, 5722, 7190, 9977, 1330, 2369, 8693, 1426, 556, 3435, 6550, 7442, 9513, 146, 8061, 1719,
				3754, 6140, 2424, 6280, 5997, 6688, 2530, 2550, 7438, 9867, 2950, 194, 3196, 3298, 417, 8287, 6106,
				4489, 6283, 2456, 5735, 8115, 1702, 1317, 672, 5787, 2264, 4314, 4356, 1186, 54, 913, 809, 1833, 946,
				4314, 7757, 8322, 9559, 3647, 7983, 482, 4145, 3197, 223, 7130, 2162, 5536, 451, 1174, 467, 2045, 1660,
				6293, 6440, 7254, 25, 6155, 9511, 4746, 650, 3187, 8314, 4475, 8023, 2169, 4019, 8788, 9906, 7959, 7392,
				203, 3626, 6478, 4415, 9315, 5825, 9335, 5875, 4373, 160, 1834, 8071, 7488, 8298, 7519, 8178, 7774,
				2271, 1764, 2669, 7193, 3986, 3103, 8481, 9214, 7628, 4803, 4100, 528, 2626, 1544, 1925, 1024, 9973,
				3062, 4182, 1004, 7433, 7506, 7594, 2726, 3032, 8493, 143, 7223, 1287, 3065, 7901, 9188, 8361, 2414,
				975, 4271, 9171, 236, 834, 9712, 5761, 8897, 4668, 7286, 2551, 141, 3695, 2696, 1625, 8020, 2126, 6577,
				1695, 2659, 6303, 7372, 2467, 4679, 2594, 3852, 5485, 1019, 8465, 1120, 3153, 2801, 8088, 1061, 1927,
				9011, 4758, 2171, 316, 9577, 228, 2044, 2759, 7165, 5110, 7883, 7087, 9566, 3488, 9578, 4475, 2626,
				5628, 5630, 1929, 5424, 8521, 6903, 4963, 124, 4597, 3738, 3262, 196, 2526, 1265, 8261, 6203, 8117,
				5031, 327, 9012, 772, 6412, 5548, 1154, 1521, 9791, 4925, 189, 1764, 4941, 852, 8663, 3830, 901, 7714,
				8959, 7579, 8366, 3008, 1478, 1201, 6059, 6440, 2304, 2761, 9358, 2325, 6478, 5109, 1114, 4888, 9802,
				2851, 4461, 2429, 2994, 7385, 9406, 6541, 1112, 8705, 2836, 2357, 6073, 9351, 8824, 4486, 557, 3217,
				1627, 9358, 8527, 3358, 9338, 3272, 3870, 9362, 2897, 3023, 9618, 113, 2718, 8697, 1586, 4042, 4424,
				4130, 4230, 4566, 6560, 8933, 2297, 9856, 2054, 6963, 3585, 9735, 6655, 6973, 1458, 4370, 2533, 2964,
				2608, 2484, 912, 1636, 68, 2849, 4676, 2939, 2224, 2143, 3755, 6512, 2742, 176, 1460, 7826, 3222, 7871,
				1627, 1935, 5206, 1784, 3851, 7399, 2280, 2702, 2194, 2735, 1638, 6535, 5557, 1994, 177, 5706, 6963,
				549, 5882, 301, 4414, 6642, 9856, 4856, 3143, 1463, 7612, 878, 425, 2679, 1753, 8444, 8297, 2674, 41,
				9314, 876, 73, 2819, 611, 1018, 4933, 8113, 696, 3170, 3832, 41, 6489, 8686, 9091, 9498, 2590, 5991,
				5146, 9354, 9315, 8652, 6741, 2045, 1259, 336, 8760, 1193, 7606, 5265, 2182, 8504, 3830, 3776, 609,
				9293, 5998, 7550, 9557, 5562, 1628, 6468, 9542, 6130, 1241, 7814, 9175, 602, 6078, 216, 8684, 8214,
				3993, 5825, 5602, 3393, 5760, 2671, 6429, 8028, 4085, 76, 8787, 5499, 4971, 6288, 3848, 2605, 504, 1222,
				2664, 5707, 2364, 9011, 2172, 7490, 8241, 2165, 5543, 7620, 914, 7592, 6705, 1819, 9233, 751, 5206,
				4976, 1540, 304, 1423, 1099, 1248, 3585, 3649, 2972, 7865, 2914, 1076, 1546, 8713, 7547, 8679, 1770,
				5263, 8520, 3986, 8290, 5945, 2866, 8541, 3246, 5509, 8319, 7871, 9602, 8324, 1133, 4473, 7153, 5088,
				8571, 9764, 9902, 7104, 4424, 3528, 1601, 6970, 4016, 5566, 29, 1544, 5348, 2089, 2944, 2638, 2410,
				6464, 5050, 4682, 1589, 1343, 609, 2061, 1222, 1759, 9955, 889, 4147, 691, 7950, 2844, 1431, 5621, 749,
				7068, 4537, 784, 8036, 2227, 5186, 7039, 9854, 5630, 1225, 5749, 9924, 3360, 2258, 4767, 4945, 4956,
				3319, 2727, 5412, 1026, 356, 1002, 2550, 9497, 8585, 9516, 7965, 3343, 8076, 7914, 6143, 1197, 1949,
				5073, 427, 4607, 6174, 4430, 2405, 6706, 627, 9813, 9376, 94, 6566, 6037, 4737, 9142, 815, 5995, 8257,
				6653, 3937, 839, 483, 1356, 1016, 1132, 8231, 7842, 4626, 2012, 2638, 4187, 9691, 1651, 5663, 1635, 894,
				354, 1417, 3453, 4009, 7263, 2234, 5455, 6304, 6635, 6304, 4257, 149, 1125, 2318, 4214, 7110, 4029,
				9201, 1081, 1319, 6859, 4051, 4156, 1362, 5265, 1904, 3677, 9644, 6910, 4903, 3562, 8490, 4949, 1283,
				3654, 675, 2221, 5403, 6924, 3832, 9370, 3879, 260, 9009, 2620, 3972, 4, 1946, 9782, 6505, 2393, 2686,
				5314, 6699, 5590, 2723, 5939, 9038, 6411, 1462, 6235, 2509, 9962, 3960, 6494, 1516, 5270, 4938, 8870,
				59, 4701, 3972, 6265, 5118, 6216, 4556, 7816, 8331, 3040, 213, 9289, 8083, 1955, 6086, 711, 4485, 4775,
				8381, 9816, 5952, 6542, 8116, 1680, 7111, 5899, 3074, 789, 3978, 8133, 9957, 8690, 6114, 9, 2942, 5791,
				1724, 1364, 29, 5185, 4779, 7201, 5072, 1886, 1975, 1072, 1334, 2868, 6154, 4296, 2169, 826, 9677, 5630,
				8651, 2599, 3310, 4694, 4687, 81, 117, 2250 };

		int[] arr = new int[] { 42, 468, 335, 501, 170, 725, 479, 359, 963, 465, 706, 146, 282, 828, 962, 492, 996, 943,
				828, 437, 392, 605, 903, 154, 293, 383, 422, 717, 719, 896, 448, 727, 772, 539, 870, 913, 668, 300, 36,
				895, 704, 812, 323, 334, 674, 665, 142, 712, 254, 869, 548, 645, 663, 758, 38, 860, 724, 742, 530, 779,
				317, 36, 191, 843, 289, 107, 41, 943, 265, 649, 447, 806, 891, 730, 371, 351, 102, 394, 549, 630, 624,
				85, 955, 757, 841, 967, 377, 932, 309, 945, 440, 627, 324, 538, 539, 119, 83, 930, 542 };
		// System.out.println(maxProfit(arr.length, arr));
		 System.out.println(calculateMaxProfit(arr1));
		//rotate(2, new int[] {1,2,3,4,5});

	}

}
